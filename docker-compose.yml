services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      -  MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      -  MYSQL_DATABASE=${MYSQL_DATABASE:-mysql}
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chat-network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$${MYSQL_ROOT_PASSWORD} || exit 1"]
      timeout: 20s
      retries: 10

  backend:
    image: snehasanam/chattingo-backend:latest
    container_name: chattingo-backend
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
       mysql:
         condition: service_healthy
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL:-jdbc:mysql://dbservice:3306/chattingo_db?createDatabaseIfNotExist=true}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME:-root}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SERVER_PORT: ${SERVER_PORT}
      WEBSOCKET_ENDPOINT: ${WEBSOCKET_ENDPOINT}
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "false"
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://chattingo-app.duckdns.org}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,POST,PUT,DELETE,OPTIONS,PATCH}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:-*}
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://chattingo-app.duckdns.org:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  frontend:
    image: snehasanam/chattingo-frontend:latest
    container_name: chattingo-frontend
    restart: always
    ports:
      - "3000:80"
    environment:
      - ./frontend/.env 
    depends_on:
      - backend
    networks:
      - chat-network
    
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/build:/usr/share/nginx/html:ro # React build output
    depends_on:
      - backend
    networks:
      - chat-network

networks:
  chat-network:
    driver: bridge

volumes:
  mysql-data:
